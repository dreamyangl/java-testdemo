总原则：开闭原则（Open Close Principle）
1.单一职责原则：
    不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。
2.里氏替换原则（Liskov Substitution Principle）:
    任何基类可以出现的地方，子类一定可以出现
3.依赖倒转原则（Dependence Inversion Principle）:
    面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互
4.接口隔离原则（Interface Segregation Principle）
    每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好
5.迪米特法则（最少知道原则）（Demeter Principle）:
    一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类
